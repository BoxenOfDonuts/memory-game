{"version":3,"sources":["components/Header/Header.js","App.js","components/hooks/http.js","index.js"],"names":["Header","props","className","title","Board","useState","score","setScore","highScore","setHighScore","clickedCards","setClickedCards","isNewGame","setIsNewGame","prevClickedCards","useRef","useEffect","current","console","log","onCardClick","id","includes","prevState","prevScore","numberOfCards","ScoreBoard","GameBoard","url","dependencies","isLoading","setIsLoading","fetchData","setFetchedData","fetch","then","response","ok","Error","json","data","catch","error","useHttp","fetchedData","gameCards","setGameCards","totalLength","desiredLength","start","Math","floor","random","randomStart","length","end","slice","map","card","imageURL","card_images","image_url_small","cardName","name","content","array","newArray","i","j","shuffle","Card","onClick","src","alt","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f517b330.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>{props.title}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import { useEffect, useRef, useState } from 'react';\nimport { useHttp } from './components/hooks/http';\nimport './App.css';\nimport Header from './components/Header/Header'\n\nconst shuffle = (array) => {\n  console.log('shufflin')\n  const newArray = [...array]\n  for (let i = newArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n  }\n  return newArray;\n}\n\nconst randomStart = (totalLength, desiredLength) => {\n  const start = Math.floor(Math.random() * (totalLength - desiredLength))\n  const end  = start + desiredLength\n\n  return [start, end]\n}\n\nconst cardsToScreenSize = () => {\n  const height = window.innerHeight;\n  // < 400 is 1 card\n  // < 565 is 2 cards\n  // < 255 is 3\n}\n\nconst Board = (props) => {\n  const [ score, setScore ] = useState(0);\n  const [ highScore, setHighScore ] = useState(0);\n  const [ clickedCards, setClickedCards ] = useState([]);\n  const [ isNewGame, setIsNewGame ] = useState(false);\n  const numberOfCards = 18;\n  const prevClickedCards = useRef();\n\n  useEffect(() => {\n    prevClickedCards.current = clickedCards\n  });\n\n  useEffect(() => {\n    const resetAll = () => {\n      if (score > highScore) {\n        setHighScore(score)\n      }\n      setScore(0);\n      setClickedCards([]);\n      setIsNewGame(false);\n    }\n    if (!isNewGame) return;\n    console.log('is new game udpated')\n    resetAll();\n  }, [isNewGame])\n\n\n  const handleClick = (id) => {\n    console.log(`handle click ${prevClickedCards.current}`)\n    if (!prevClickedCards.current.includes(id)) {\n      setClickedCards(prevState => [...prevState, id])\n      setScore(prevScore => prevScore + 1)\n    } else {\n      console.log('you lose!')\n      setIsNewGame(true); \n    }\n  };\n\n  const Thing = <button type='button' onClick={() => setIsNewGame(false)}>New Game?</button>\n\n  return (\n    <div className=\"board\">\n      <ScoreBoard\n        score={score}\n        highScore={highScore}\n      />\n      <GameBoard\n        onCardClick={handleClick}\n        isNewGame={isNewGame}\n        clickedCards={clickedCards}\n        numberOfCards={numberOfCards}\n      />\n      {/* {isNewGame && Thing} */}\n    </div>\n  );\n}\n\nconst ScoreBoard = ({ score, highScore }) => {\n  return (\n    <div className=\"scoreboard\">\n      <h3>Score: {score} High Score: {highScore}</h3>\n    </div>\n  );\n}\n\nconst GameBoard = ({ onCardClick, isNewGame, numberOfCards }) => {\n  const [ isLoading, fetchedData ] = useHttp(null, [isNewGame]);\n  const [ gameCards, setGameCards ] = useState(null)\n\n  console.log(`loading ${isLoading}`)\n\n  useEffect(() => {\n    console.log('mounting!')\n    if(fetchedData) {\n      const [ start, end ] = randomStart(fetchedData.data.length, numberOfCards);\n      setGameCards(fetchedData\n                      .data\n                      .slice(start,end)\n                      .map((card) => {\n                        return <Card\n                          key={card.id}\n                          imageURL={card.card_images[0].image_url_small}\n                          cardName={card.name}\n                          id={card.id}\n                          onCardClick={onCardClick}\n                        />\n                      }));\n      }\n  }, [isLoading])\n\n  let content =  <div>Loading...</div>;\n\n  if (!isLoading && !isNewGame && gameCards) {\n    content = shuffle(gameCards);\n  }\n\n  return (\n    <div className=\"game-board\">\n      {content}\n    </div>\n  );\n}\n\nconst Card = ({ imageURL, cardName, id, onCardClick }) => {\n\n  return (\n    <figure className='game-card' onClick={() => onCardClick(id)}>\n      <img src={imageURL} alt={cardName}/>\n      {/* <figcaption>{cardName}</figcaption> */}\n    </figure>\n  );\n}\n\nconst App = () => {\n  const mainTitle = 'Memory Game';\n\n  useEffect(() => {\n    //\n  },[])\n  \n\n  return (\n    <div className=\"main-app\">\n      <Header title={mainTitle}/>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;","import {useEffect, useState} from 'react';\r\n\r\nexport const useHttp = (url, dependencies) => {\r\n    // const [ isLoading, setIsLoading ] = useState(false);\r\n    const [ isLoading, setIsLoading ] = useState(false);\r\n    const [ fetchData, setFetchedData ] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n\r\n        fetch('https://db.ygoprodeck.com/api/v7/cardinfo.php?cardsetocg=Vol.1')\r\n        .then(response => {\r\n          if(!response.ok) {\r\n            throw new Error('Failed to fetch.');\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          setFetchedData(data);\r\n          setIsLoading(false);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            setIsLoading(false);\r\n        })\r\n    }, dependencies);\r\n\r\n    return [ isLoading, fetchData ]\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}