{"version":3,"sources":["components/Header/Header.tsx","components/Card/Card.tsx","components/Board/Board.tsx","components/hooks/http.tsx","App.js","index.js"],"names":["Header","props","className","title","Card","imageURL","cardName","id","onCardClick","onClick","src","alt","shuffle","array","newArray","i","length","j","Math","floor","random","ScoreBoard","score","highScore","GameBoard","newGameCount","numberOfCards","url","dependencies","useState","isLoading","setIsLoading","fetchData","setFetchedData","useEffect","fetch","then","response","ok","Error","json","data","catch","error","console","log","useHttp","fetchedData","gameCards","setGameCards","cards","desiredLength","slice","map","card","card_images","image_url_small","name","content","Board","setScore","setHighScore","clickedCards","setClickedCards","setNewGameCount","prevClickedCards","useRef","current","includes","prevState","prevScore","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAeeA,EARiB,SAACC,GAC/B,OACE,qBAAKC,UAAU,SAAf,SACE,6BAAKD,EAAME,W,cCQFC,G,MATe,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,YACvD,OACE,wBACEN,UAAU,YAAYO,QAAS,kBAAMD,EAAYD,IADnD,SAEE,qBAAKG,IAAKL,EAAUM,IAAKL,QCIzBM,G,MAAU,SAACC,GAEf,IADA,IAAMC,EAAQ,YAAOD,GACZE,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADE,EAEf,CAACD,EAASG,GAAIH,EAASC,IAAnDD,EAASC,GAFkC,KAE9BD,EAASG,GAFqB,KAI9C,OAAOH,IAuDHO,EAAwC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UACtD,OACE,qBAAKrB,UAAU,aAAf,SACE,yCACUoB,EADV,gBAC8BC,QAM9BC,EAAsC,SAAC,GAAkD,IAAhDhB,EAA+C,EAA/CA,YAAaiB,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,cAAoB,ECrFxE,SAACC,EAAaC,GAAuD,IAAD,EACtDC,oBAAkB,GADoC,mBACjFC,EADiF,KACtEC,EADsE,OAEpDF,mBAAS,MAF2C,mBAEjFG,EAFiF,KAEtEC,EAFsE,KAuBxF,OAnBAC,qBAAU,WACRH,GAAa,GACbI,MAAMR,GACHS,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,oBAElB,OAAOF,EAASG,UAEjBJ,MAAK,SAACK,GACLR,EAAeQ,GACfV,GAAa,MAEdW,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZZ,GAAa,QAEhBH,GAEI,CAACE,EAAWE,GD+Dcc,CAAQ,iEAAkE,IADf,mBACrFhB,EADqF,KAC1EiB,EAD0E,OAE1DlB,mBAA6B,MAF6B,mBAErFmB,EAFqF,KAE1EC,EAF0E,KAI5Ff,qBAAU,WACR,GAAIa,IAAgBjB,EAAW,CAC7B,IAAMoB,GApESrC,EAoEWkC,EAAYN,KApETU,EAoEezB,EAnEzCd,EAAQC,GAAOuC,MAAM,EAAGD,IAoE3BF,EACEC,EAAMG,KAAI,SAACC,GACT,OACE,cAAC,EAAD,CAEEjD,SAAUiD,EAAKC,YAAY,GAAGC,gBAC9BlD,SAAUgD,EAAKG,KACflD,GAAI+C,EAAK/C,GACTC,YAAaA,GAJR8C,EAAK/C,aASTuB,GACTmB,EAAa,MAnFC,IAACpC,EAAcsC,IAqF9B,CAACrB,EAAWL,IAEf,IAAIiC,EAAqC,qBAAKxD,UAAU,UAAf,wBAMzC,OAJK4B,GAAakB,IAChBU,EAAU9C,EAAQoC,IAGb,qBAAK9C,UAAU,aAAf,SAA6BwD,KAGvBC,EA5FD,WAAO,IAAD,EACQ9B,mBAAiB,GADzB,mBACXP,EADW,KACJsC,EADI,OAEgB/B,mBAAiB,GAFjC,mBAEXN,EAFW,KAEAsC,EAFA,OAGsBhC,mBAAgB,IAHtC,mBAGXiC,EAHW,KAGGC,EAHH,OAIsBlC,mBAAiB,GAJvC,mBAIXJ,EAJW,KAIGuC,EAJH,KAMZC,EAAmBC,iBAAOJ,GAEhC5B,qBAAU,WACR+B,EAAiBE,QAAUL,KAG7B5B,qBAAU,WAEFZ,EAAQC,GACVsC,EAAavC,GAEfsC,EAAS,GACTG,EAAgB,MAGjB,CAACtC,IAYJ,OACE,sBAAKvB,UAAU,QAAf,UACE,cAAC,EAAD,CACEoB,MAAOA,EACPC,UAAWA,IAEb,cAAC,EAAD,CACEf,YAjBc,SAACD,GACd0D,EAAiBE,QAAQC,SAAS7D,IAIrCqC,QAAQC,IAAI,aACZmB,GAAgB,SAACK,GAAD,OAAeA,EAAY,OAJ3CN,GAAgB,SAACM,GAAD,4BAAmBA,GAAnB,CAA8B9D,OAC9CqD,GAAS,SAACU,GAAD,OAAeA,EAAY,OAelC7C,aAAcA,EACdC,cArCwB,SEpBjB6C,EAXH,WAGV,OACE,sBAAKrE,UAAU,WAAf,UACE,cAAC,EAAD,CAAQC,MAJM,gBAKd,cAAC,EAAD,QCLNqE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b4406269.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\ninterface Props {\n  title: string;\n}\n\nconst Header: React.FC<Props> = (props) => {\n  return (\n    <div className=\"header\">\n      <h1>{props.title}</h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import './Card.css';\n\ninterface Props {\n  imageURL: string;\n  cardName: string;\n  id: number;\n  onCardClick: (id: number) => void;\n}\n\nconst Card: React.FC<Props> = ({ imageURL, cardName, id, onCardClick }) => {\n  return (\n    <figure\n      className=\"game-card\" onClick={() => onCardClick(id)}>\n      <img src={imageURL} alt={cardName} />\n    </figure>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { useHttp } from '../hooks/http';\r\nimport Card from '../Card/Card';\r\nimport './Board.css'\r\n\r\ntype Cards = Readonly<any[]>\r\n\r\ninterface scoreBoardProps {\r\n  score: number;\r\n  highScore: Number\r\n}\r\ninterface gameBoardProps {\r\n  onCardClick: (id: number) => void\r\n  newGameCount: number;\r\n  numberOfCards: number\r\n}\r\n\r\nconst shuffle = (array: Cards) => {\r\n  const newArray = [...array];\r\n  for (let i = newArray.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\r\n  }\r\n  return newArray;\r\n};\r\n\r\nconst randomArray = (array: Cards, desiredLength: number) => {\r\n  return shuffle(array).slice(0, desiredLength);\r\n};\r\n\r\nconst Board = () => {\r\n  const [score, setScore] = useState<number>(0);\r\n  const [highScore, setHighScore] = useState<number>(0);\r\n  const [clickedCards, setClickedCards] = useState<Cards>([]);\r\n  const [newGameCount, setNewGameCount] = useState<number>(0);\r\n  const numberOfCards: number = 18;\r\n  const prevClickedCards = useRef(clickedCards);\r\n\r\n  useEffect(() => {\r\n    prevClickedCards.current = clickedCards;\r\n  });\r\n\r\n  useEffect(() => {\r\n    const resetAll = () => {\r\n      if (score > highScore) {\r\n        setHighScore(score);\r\n      }\r\n      setScore(0);\r\n      setClickedCards([]);\r\n    };\r\n    resetAll();\r\n  }, [newGameCount]);\r\n\r\n  const handleClick = (id: number) => {\r\n    if (!prevClickedCards.current.includes(id)) {\r\n      setClickedCards((prevState) => [...prevState, id]);\r\n      setScore((prevScore) => prevScore + 1);\r\n    } else {\r\n      console.log('you lose!');\r\n      setNewGameCount((prevState) => prevState + 1 );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <ScoreBoard\r\n        score={score}\r\n        highScore={highScore}\r\n      />\r\n      <GameBoard\r\n        onCardClick={handleClick}\r\n        newGameCount={newGameCount}\r\n        numberOfCards={numberOfCards}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ScoreBoard: React.FC<scoreBoardProps> = ({ score, highScore }) => {\r\n  return (\r\n    <div className=\"scoreboard\">\r\n      <h3>\r\n        Score: {score} High Score: {highScore}\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GameBoard: React.FC<gameBoardProps> = ({ onCardClick, newGameCount, numberOfCards }) => {\r\n  const [isLoading, fetchedData] = useHttp('https://db.ygoprodeck.com/api/v7/cardinfo.php?cardsetocg=Vol.1', []);\r\n  const [gameCards, setGameCards] = useState<null|JSX.Element[]>(null);\r\n\r\n  useEffect(() => {\r\n    if (fetchedData && !isLoading) {\r\n      const cards = randomArray(fetchedData.data, numberOfCards);\r\n      setGameCards(\r\n        cards.map((card) => {\r\n          return (\r\n            <Card\r\n              key={card.id}\r\n              imageURL={card.card_images[0].image_url_small}\r\n              cardName={card.name}\r\n              id={card.id}\r\n              onCardClick={onCardClick}\r\n            />\r\n          );\r\n        })\r\n      );\r\n    } else if (isLoading){\r\n      setGameCards(null)\r\n    }\r\n  }, [isLoading, newGameCount]);\r\n\r\n  let content: JSX.Element|JSX.Element[] = <div className='loading'>Loading...</div>;\r\n\r\n  if (!isLoading && gameCards) {\r\n    content = shuffle(gameCards);\r\n  }\r\n\r\n  return <div className=\"game-board\">{content}</div>;\r\n};\r\n\r\nexport default Board;\r\n","import { useEffect, useState } from 'react';\r\n\r\n\r\nexport const useHttp= (url: string, dependencies: []): [boolean, null | {data: any[]}] => {\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [fetchData, setFetchedData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetch(url)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setFetchedData(data);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setIsLoading(false);\r\n      });\r\n  }, dependencies);\r\n\r\n  return [isLoading, fetchData];\r\n};\r\n","import './App.css';\r\nimport Header from './components/Header/Header';\r\nimport Board from './components/Board/Board';\r\n\r\nconst App = () => {\r\n  const mainTitle = 'Memory Game';\r\n\r\n  return (\r\n    <div className=\"main-app\">\r\n      <Header title={mainTitle} />\r\n      <Board />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}